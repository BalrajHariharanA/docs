"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[32],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var l=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},o=Object.keys(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=l.createContext({}),i=function(e){var t=l.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=i(e.components);return l.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},m=l.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=i(n),m=r,h=c["".concat(u,".").concat(m)]||c[m]||d[m]||o;return n?l.createElement(h,a(a({ref:t},p),{},{components:n})):l.createElement(h,a({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[c]="string"==typeof e?e:r,a[1]=s;for(var i=2;i<o;i++)a[i]=n[i];return l.createElement.apply(null,a)}return l.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6606:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var l=n(7462),r=(n(7294),n(3905));const o={sidebar_position:4},a="Run Multiple Rollups Locally",s={unversionedId:"dev-cluster/run-multiple-rollups-locally",id:"dev-cluster/run-multiple-rollups-locally",title:"Run Multiple Rollups Locally",description:"To deploy your own rollup on the Astria Dusknet devnet, check out the",source:"@site/docs/dev-cluster/4-run-multiple-rollups-locally.md",sourceDirName:"dev-cluster",slug:"/dev-cluster/run-multiple-rollups-locally",permalink:"/docs/dev-cluster/run-multiple-rollups-locally",draft:!1,editUrl:"https://github.com/astriaorg/docs/docs/dev-cluster/4-run-multiple-rollups-locally.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Running a Local Rollup",permalink:"/docs/dev-cluster/deploy-a-local-rollup"},next:{title:"Shutting Down the Cluster",permalink:"/docs/dev-cluster/shutdown"}},u={},i=[{value:"What&#39;s Going on Under the Hood?",id:"whats-going-on-under-the-hood",level:3}],p={toc:i},c="wrapper";function d(e){let{components:t,...o}=e;return(0,r.kt)(c,(0,l.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"run-multiple-rollups-locally"},"Run Multiple Rollups Locally"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To deploy your own rollup on the Astria Dusknet devnet, check out the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/running-a-rollup-on-astria-dusknet/overview/"},"instructions here"),"!")),(0,r.kt)("p",null,"At Astria we believe strongly that deploying a rollup should be as easy as deploying a smart contract. The dev-cluster shows this is indeed possible."),(0,r.kt)("p",null,"Navigate back to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/astriaorg/dev-cluster"},"dev-cluster"),"\nrepo in your terminal and run the following command with your own rollup name\nand network id:"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"NOTE:")," The default rollup name and network id are ",(0,r.kt)("inlineCode",{parentName:"p"},"astria")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"912559"),". When\ndeploying your second rollup you ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"must"))," use a different name and number.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"just deploy-rollup <rollup_name> <network_id>\n")),(0,r.kt)("p",null,"As before, it will take a moment for everything to spin up, but in the meantime keep the the rollup name and network id handy and navigate back to your browser and open a new window with the following url, replacing ",(0,r.kt)("inlineCode",{parentName:"p"},"rollup_name")," with the name you just used to deploy your new rollup:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"http://blockscout.<rollup_name>.localdev.me/\n")),(0,r.kt)("p",null,"Once everything has spin up you will see a new block explorer for your new rollup."),(0,r.kt)("p",null,"You can now deploy transaction to that rollup independently.\nIn the ",(0,r.kt)("inlineCode",{parentName:"p"},"astria-web3/packages/evm-test-data")," directory open a new terminal and run the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"just generate-transactions <rollup_name> <network_id>\n")),(0,r.kt)("p",null,"As before, this command will deploy test transaction data to your new rollup.\nYou can also go back to your original terminal window for the test data deployment on the default rollup and rerun the ",(0,r.kt)("inlineCode",{parentName:"p"},"just generate-transactions")," command. If you switch back and forth between the default block explorer window and your new rollup window, you will see transactions showing up on each rollup independently!"),(0,r.kt)("p",null,"To navigate to the new Block Explorer and Faucet from the additional rollup,\ntake the rollup name that you used and replace ",(0,r.kt)("inlineCode",{parentName:"p"},"<rollup_name>")," in the urls\nbelow:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"http://blockscout.<rollup_name>.localdev.me/\nhttp://faucet.<rollup_name>.localdev.me/\n")),(0,r.kt)("p",null,"The only limitations to running numerous rollups are the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Can your hardware handle it"),(0,r.kt)("li",{parentName:"ul"},"There are no rollup name and network id clashes")),(0,r.kt)("h3",{id:"whats-going-on-under-the-hood"},"What's Going on Under the Hood?"),(0,r.kt)("p",null,"One last thing to mention is what is actually happening when you deploy a new rollup in the dev-cluster. When you you deploy a new rollup the only new containers that are getting spun up in the cluster are a new rollup node, a conductor, block explorer, and faucet. Only one instance of the shared sequencer and the DA layer remain running and the transactions from all the rollups are collectively getting run though those networks."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Multiple Rollups",src:n(9276).Z,width:"5412",height:"2013"})),(0,r.kt)("p",null,"You can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl")," to see that this is the case."),(0,r.kt)("p",null,"When running only the default rollup:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dev-cluster % kubectl get deployments --all-namespaces\nNAMESPACE            NAME                       READY   UP-TO-DATE   AVAILABLE   AGE\nastria-dev-cluster   astria-blockscout          1/1     1            1           37s\nastria-dev-cluster   astria-faucet              1/1     1            1           37s\nastria-dev-cluster   astria-geth                1/1     1            1           37s\nastria-dev-cluster   celestia-local             1/1     1            1           94m\nastria-dev-cluster   sequencer                  1/1     1            1           94m\ningress-nginx        ingress-nginx-controller   1/1     1            1           94m\nkube-system          calico-kube-controllers    1/1     1            1           95m\nkube-system          coredns                    2/2     2            2           95m\nlocal-path-storage   local-path-provisioner     1/1     1            1           95m\n")),(0,r.kt)("p",null,"After deploying the second rollup:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dev-cluster % kubectl get deployments --all-namespaces\nNAMESPACE            NAME                       READY   UP-TO-DATE   AVAILABLE   AGE\nastria-dev-cluster   anotherrollup-blockscout   1/1     1            1           114s\nastria-dev-cluster   anotherrollup-faucet       1/1     1            1           114s\nastria-dev-cluster   anotherrollup-geth         1/1     1            1           114s\nastria-dev-cluster   astria-blockscout          1/1     1            1           2m13s\nastria-dev-cluster   astria-faucet              1/1     1            1           2m13s\nastria-dev-cluster   astria-geth                1/1     1            1           2m13s\nastria-dev-cluster   celestia-local             1/1     1            1           95m\nastria-dev-cluster   sequencer                  1/1     1            1           95m\ningress-nginx        ingress-nginx-controller   1/1     1            1           96m\nkube-system          calico-kube-controllers    1/1     1            1           97m\nkube-system          coredns                    2/2     2            2           97m\nlocal-path-storage   local-path-provisioner     1/1     1            1           97m\n")))}d.isMDXComponent=!0},9276:(e,t,n)=>{n.d(t,{Z:()=>l});const l=n.p+"assets/images/multiple-rollups-7f46706e741f9afc0fc8e84c3e96d790.png"}}]);